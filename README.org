#+STARTUP: showall indent

* WSL Utilities

Windows Subsystem for Linux で動作するユティリティコマンド群です。

各コマンドは wslcommon と wslinit をインポートしていますので、コマンドと同じ場所
（コマンドパスが通ったディレクトリ）に格納してご利用ください。

また、DrvFs を多くマウントしている場合は、.bash_profile の .bashrc を実行している行の後に、
以下の設定を追加してください。 wsl コマンドの高速化 が図られます。 

#+BEGIN_EXAMPLE
source wslinit
#+END_EXAMPLE

実際には、以下のような .bash_profile を作成するのが良いと思います。mount 行を追加した場合は、
WSL のコンソールを再起動してください。

#+BEGIN_EXAMPLE
sudo sh << 'EOF'
mount -t drvfs '\\<コンピュータ名1>\<共有名>' /mnt/share1
mount -t drvfs '\\<コンピュータ名2>\<共有名>' /mnt/share2
mount -t drvfs '\\<コンピュータ名3>\<共有名>' /mnt/share3
EOF

[ -r ~/.bashrc ] && source ~/.bashrc
source wslinit
#+END_EXAMPLE

認証を必要とするネットワークボリュームを利用する場合は、予め以下の設定により認証情報を
記憶させる必要があります。

- https://www.ipentec.com/document/windows-delete-stored-authentication-information

ネットワークボリュームにアクセスした際に開く認証画面で、「資格情報を記憶する」にチェック
を入れることでも登録できます。

** ■ wslstart

cygstart 的コマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
wslstart target
wslstart -c
wslstart -h
#+END_EXAMPLE

詳しくは以下を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/62.html][WSL で cygstart 的コマンドを使うための設定]]

また、スクリプトの初めにあるコメントも参照ください。

** ■ sglstart

singleton な動きをする cygstart 的コマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
sglstart target
sglstart -c
sglstart -h
#+END_EXAMPLE

詳しくは以下を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/63.html][singleton な動きをする cygstart 的コマンドを使うための設定 （WSL版）]]

** ■ wslpath

cygpath 的コマンドです。

常に絶対パスに対して機能する以外は、概ね cygpath コマンドと同様に動作します。

Windows 10 Fall Creators Update リリース以降の Build 17046 で wslpath コマンドがサポート
された様ですので、いずれ不要なコマンドになると思いますが、それまでの繋ぎとして利用いただければ
と思います。

- https://msdn.microsoft.com/en-us/commandline/wsl/release-notes#build-17046
- https://kledgeb.blogspot.jp/2017/11/wsl-120-build-17046wsl.html

*** 使用方法

#+BEGIN_EXAMPLE
wslpath [-u|-w|-m] path
wslpath -h
#+END_EXAMPLE

*** コマンドオプション

**** ● -u オプション

パス名を UNIX 形式で表示します。（デフォルトの動作）

**** ● -w オプション

パス名を Windows 形式で表示します。

**** ● -m オプション

-w オプションに似ています、「¥」の代わりに「/」を使用します。

** ■ wslln

NTFS シンボリックリンクの作成に対応した ln 的コマンドです。

Windows 10 Fall Creators Update の Windows Subsystem for Linux では、DrvFS ファイルシステム上
にある NTFS シンボリックリンクを表示できるようになりました。ただし、ln コマンドで
NTFS シンボリックリンクを作成することはできません。
本コマンドは、DrvFs ファイルシステム上にシンボリックリンクを作成する場合は NTFS シンボリックリンク
を、DrvFs ファイルシステム以外にシンボリックリンクを作成する場合は WSL 本来のシンボリックリンク
を作成するように動作する ln と mklink の機能をラッパーしたコマンドです。

Windows 10 Fall Creators Update リリース以降の Build 17046 では、DrvFs 上での NTFS 
シンボリックリンクの作成がサポートされた様ですが、リンクターゲットが相対パスである必要がある
など、幾つかの制約が有るようです。

- https://msdn.microsoft.com/en-us/commandline/wsl/release-notes#build-17046
- https://kledgeb.blogspot.jp/2017/11/wsl-120-build-17046wsl.html

*** 使用方法

#+BEGIN_EXAMPLE
wslln [-s] [-f] [-a] target link
wslln [-s] [-f] [-a] target
wslln -h
#+END_EXAMPLE

*** コマンドオプション

**** ● -s オプション

ハードリンクではなく、シンボリックリンクを作成します。
wslln -s target link 実行時のシンボリックリンク作成ルールは、以下のとおりとなります。

|---------------------------+---------------------+---------------------------------|
| target が示すのパスの位置 | link を作成する場所 | 動作                            |
|---------------------------+---------------------+---------------------------------|
| DrvFs 配下                | DrvFs 配下          | NTFS のシンボリックリンクを作成 |
| DrvFs 配下以外            | DrvFs 配下          | 許可しない（エラーとする）      |
| DrvFs 配下                | DrvFs 配下以外      | WSL のシンボリックリンクを作成  |
| DrvFs 配下以外            | DrvFs 配下以外      | WSL のシンボリックリンクを作成  |
|---------------------------+---------------------+---------------------------------|

**** ● -f オプション

リンクファイルが存在する場合、削除してからリンクファイルを作成します。

**** ● -a オプション

ターゲットファイルのパスを絶対パスに変換（readlink -m）してからリンクを作成します。
ln コマンドには無いオプションとなります。以下で紹介している emacs との連携の設定の
中で利用されています。

*** emacs との連携

以下の説明を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/73.html][WSL で NTFS シンボリックリンクや Windows ショートカットを作成するための設定]]

** ■ wslsc

Windows ショートカットを作成するためのコマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
wslsc [-f] target shortcut
wslsc [-f] target
wslsc -c
wslsc -h
#+END_EXAMPLE

wslsc target shortcut 実行時のショートカット作成ルールは、以下のとおりとなります。

|---------------------------+-------------------------+----------------------------|
| target が示すのパスの位置 | shortcut を作成する場所 | 動作                       |
|---------------------------+-------------------------+----------------------------|
| DrvFs 配下                | DrvFs 配下              | ショートカットを作成       |
| DrvFs 配下                | DrvFs 配下以外          | ショートカットを作成       |
| DrvFs 配下以外            | DrvFs 配下              | 許可しない（エラーとする） |
| DrvFs 配下以外            | DrvFs 配下以外          | 許可しない（エラーとする） |
|---------------------------+-------------------------+----------------------------|

*** コマンドオプション

**** ● -f オプション

ショートカットファイルが存在する場合、削除してからショートカットファイルを作成します。

**** ● -c オプション

本コマンドは、VolFs ファイルシステム上にショートカットを作成する場合、Windows の
%TEMP% 環境変数に設定されているディレクトリ配下に作業ディレクトリを作成し、利用
しています。この作業ディレクトリを消すためのコマンドを表示するオプションです。
コマンドを表示するだけのオプションですので、実行するためには sh にパイプで出力
してください。

*** emacs との連携

以下の説明を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/73.html][WSL で NTFS シンボリックリンクや Windows ショートカットを作成するための設定]]

** ■ cygsh

WSL から Cygwin のコマンドを実行するためのコマンドです。

Cygwin 環境で作成したシェルスクリプト等を WSL のシェルから実行できるようにするために
作成しました。

*** 使用方法

#+BEGIN_EXAMPLE
cygsh command args
#+END_EXAMPLE

*** 使用例

#+BEGIN_EXAMPLE
cygsh ls -la
cygsh cygstart notepad
cygsh cygstart .
cygsh sh shell-script
#+END_EXAMPLE

*** 注意事項

cygsh は tty を必要とするコマンドは動作しません。（cygsh tty の実行で確認できます。）

cygsh では、Cygwin の bash.exe コマンドを -l オプション付きで実行しているのですが、
gnupack-13 系の .bashrc には stty の設定が含まれており、これが cygsh 実行時にエラー
を出力します。stty 文を以下のとおりに if 文で囲むことでエラーを回避できますので、
必要であれば対策をしてください。

＜設定例＞
#+BEGIN_EXAMPLE
if [ -t 1 ]; then
    stty -ixon
fi
#+END_EXAMPLE

また、gnupack では startup_config.ini で環境変数の設定が可能ですが、cygsh ではその
設定が有効になりません。startup_config.ini で PATH の設定をしている場合など、留意
してください。

最後に、cygsh では Cygwin の LANG 環境変数を WSL の設定値と同じものにしてコマンドを
実行しています。（コマンド出力の文字化け回避のため。）もし、Cygwin を cp932 で使って
いた場合には、スクリプトの文字コードを変更するなど、調整が必要となる可能性があります。
