#+STARTUP: showall indent

* WSL Utilities

Windows Subsystem for Linux で動作するユティリティコマンド群です。

各コマンドは wslcommon と wslinit をインポートしていますので、コマンドと同じ場所
（コマンドパスが通ったディレクトリ）に格納してご利用ください。

また、DrvFs を多くマウントしている場合は、.bash_profile の .bashrc を実行している行の後に、
以下の設定を追加してください。 wsl コマンドの高速化 が図られます。 

#+BEGIN_EXAMPLE
source wslinit
#+END_EXAMPLE

実際には、以下のような .bash_profile を作成するのが良いと思います。mount 行を追加した場合は、
WSL のコンソールを再起動してください。

#+BEGIN_EXAMPLE
sudo sh << 'EOF'
mount -t drvfs '\\<コンピュータ名1>\<共有名>' /mnt/share1
mount -t drvfs '\\<コンピュータ名2>\<共有名>' /mnt/share2
mount -t drvfs '\\<コンピュータ名3>\<共有名>' /mnt/share3
EOF

[ -r ~/.bashrc ] && source ~/.bashrc
source wslinit
#+END_EXAMPLE

mount は /etc/fstab を設定して利用する方法もあります。Windows 10 Aprill 2018 Update では、
wsl.conf を設定することにより自動マウントも可能となっています。
（Fall Creators Update までは、sudo mount -a が必要。）

- http://ascii.jp/elem/000/001/634/1634120/

/etc/fstab の設定で、IPアドレスを含む UNC パスに対してのマウントポイントを指定する場合、
「\\172」で始まる箇所などが８進数認識されてしまいます。この場合、２つ目の「\」を敢えて
８進数の「\134」と記載することで対策可能です。

#+BEGIN_EXAMPLE
\\134172.16.0.1\<共有名>	/mnt/share1	drvfs	defaults	0 0
#+END_EXAMPLE

認証を必要とするネットワークボリュームを利用する場合は、予め以下の設定により認証情報を
記憶させる必要があります。

- https://www.ipentec.com/document/windows-delete-stored-authentication-information

ネットワークボリュームにアクセスした際に開く認証画面で、「資格情報を記憶する」にチェック
を入れることでも登録できます。

** ■ wslstart

cygstart 的コマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
wslstart target
wslstart -c
wslstart -h
#+END_EXAMPLE

詳しくは以下を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/62.html][WSL で cygstart 的コマンドを使うための設定]]

また、スクリプトの初めにあるコメントも参照ください。

** ■ sglstart

singleton な動きをする cygstart 的コマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
sglstart target
sglstart -c
sglstart -h
#+END_EXAMPLE

詳しくは以下を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/63.html][singleton な動きをする cygstart 的コマンドを使うための設定 （WSL版）]]

** ■ wslpath

cygpath 的コマンドです。

常に絶対パスに対して機能する以外は、概ね cygpath コマンドと同様に動作します。

Windows 10 April 2018 Update で wslpath コマンドがサポートされましたので、いずれ不要な
コマンドになると思いますが、Update するまでの繋ぎとして利用いただければと思います。

- https://kledgeb.blogspot.jp/2018/03/wsl-142-windows-101803wsl.html

今後、本リポジトリで公開しているコマンドも Windows 10 April 2018 Update の wslpath を
使うように見直す予定です。

*** 使用方法

#+BEGIN_EXAMPLE
wslpath [-u|-w|-m] path
wslpath -h
#+END_EXAMPLE

*** コマンドオプション

**** ● -u オプション

パス名を UNIX 形式で表示します。（デフォルトの動作）

**** ● -w オプション

パス名を Windows 形式で表示します。

**** ● -m オプション

「¥」の代わりに「/」を使用する以外、-w オプションと同様に機能します。

** ■ wslln

NTFS シンボリックリンクの作成に対応した ln 的コマンドです。

Windows 10 Fall Creators Update の Windows Subsystem for Linux では、DrvFS ファイルシステム上
にある NTFS シンボリックリンクを表示できるようになりました。ただし、ln コマンドで
NTFS シンボリックリンクを作成することはできません。
本コマンドは、DrvFs ファイルシステム上にシンボリックリンクを作成する場合は NTFS シンボリックリンク
を、DrvFs ファイルシステム以外にシンボリックリンクを作成する場合は WSL 本来のシンボリックリンク
を作成するように動作する ln と mklink の機能をラッパーしたコマンドです。

Windows 10 Fall Creators Update リリース以降の Build 17046 では、DrvFs 上での NTFS 
シンボリックリンクの作成がサポートされた様ですが、リンクターゲットが相対パスである必要がある
など、幾つかの制約が有るようです。

- https://msdn.microsoft.com/en-us/commandline/wsl/release-notes#build-17046
- https://kledgeb.blogspot.jp/2017/11/wsl-120-build-17046wsl.html

*** 使用方法

#+BEGIN_EXAMPLE
wslln [-s] [-f] [-a] target link
wslln [-s] [-f] [-a] target
wslln -h
#+END_EXAMPLE

*** コマンドオプション

**** ● -s オプション

ハードリンクではなく、シンボリックリンクを作成します。
wslln -s target link 実行時のシンボリックリンク作成ルールは、以下のとおりとなります。

|---------------------------+---------------------+---------------------------------|
| target が示すのパスの位置 | link を作成する場所 | 動作                            |
|---------------------------+---------------------+---------------------------------|
| DrvFs 配下                | DrvFs 配下          | NTFS のシンボリックリンクを作成 |
| DrvFs 配下以外            | DrvFs 配下          | 許可しない（エラーとする）      |
| DrvFs 配下                | DrvFs 配下以外      | WSL のシンボリックリンクを作成  |
| DrvFs 配下以外            | DrvFs 配下以外      | WSL のシンボリックリンクを作成  |
|---------------------------+---------------------+---------------------------------|

**** ● -f オプション

リンクファイルが存在する場合、削除してからリンクファイルを作成します。

**** ● -a オプション

ターゲットファイルのパスを絶対パスに変換（readlink -m）してからリンクを作成します。
ln コマンドには無いオプションとなります。以下で紹介している emacs との連携の設定の
中で利用されています。

*** 必要な環境設定

NTFS シンボリックリンクを管理者権限なしで作成できるようにするために、以下のどちらかの
対応を実施する必要があります。

**** ● 開発モードにする

- https://www.ipentec.com/document/document.aspx?page=windows-windows-10-set-developer-mode

**** ● SeCreateSymbolicLinkPrivilege 権限を付加する（再ログインが必要）

- https://qiita.com/ucho/items/c5ea0beb8acf2f1e4772#comment-250af72ab706bd611549

※ administrators のメンバーは UAC により特権が削除されるという以下のような情報も
あるのですが、私の環境では発生していません。

- https://qiita.com/azechi/items/f9a97393cb41be4be437

*** emacs との連携

以下の説明を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/73.html][WSL で NTFS シンボリックリンクや Windows ショートカットを作成するための設定]]

** ■ wslsc

Windows ショートカットを作成するためのコマンドです。

*** 使用方法

#+BEGIN_EXAMPLE
wslsc [-f] target shortcut
wslsc [-f] target
wslsc -h
#+END_EXAMPLE

wslsc target shortcut 実行時のショートカット作成ルールは、以下のとおりとなります。

|---------------------------+-------------------------+----------------------------|
| target が示すのパスの位置 | shortcut を作成する場所 | 動作                       |
|---------------------------+-------------------------+----------------------------|
| DrvFs 配下                | DrvFs 配下              | ショートカットを作成       |
| DrvFs 配下                | DrvFs 配下以外          | ショートカットを作成       |
| DrvFs 配下以外            | DrvFs 配下              | 許可しない（エラーとする） |
| DrvFs 配下以外            | DrvFs 配下以外          | 許可しない（エラーとする） |
|---------------------------+-------------------------+----------------------------|

*** コマンドオプション

**** ● -f オプション

ショートカットファイルが存在する場合、削除してからショートカットファイルを作成します。

*** emacs との連携

以下の説明を参照してください。

- [[https://www49.atwiki.jp/ntemacs/pages/73.html][WSL で NTFS シンボリックリンクや Windows ショートカットを作成するための設定]]

** ■ cyg

WSL から Cygwin のコマンドを実行するためのコマンドです。

Cygwin 環境で作成したシェルスクリプト等を WSL のシェルから実行できるようにするために
作成しました。

コマンドスクリプトの初めに Cygwin の bash.exe の在り処を指定する変数がありますので、
利用者の環境に合わせて修正し、ご利用ください。

*** 使用方法

#+BEGIN_EXAMPLE
cyg command [args]
cyg -h
#+END_EXAMPLE

*** 使用例

#+BEGIN_EXAMPLE
cyg uname -a
cyg cygstart notepad
cyg cygstart .
cyg shell-script
cyg sh shell-script
cyg eval 'echo $PATH'
#+END_EXAMPLE

wslstart コマンドを作成しているので不要と思いますが、以下のような alias を
定義することで利用しやすくなると思います。

#+BEGIN_EXAMPLE
alias open="cyg cygstart"
#+END_EXAMPLE

また、以下のようにシェルスクリプトのシバンを指定して、間接的に cyg を実行する
方法もあります。

#+BEGIN_EXAMPLE
#!/home/<username>/bin/cyg sh

uname -a
#+END_EXAMPLE

*** 注意事項

**** ● ホームディレクトリに .bash_profile の作成が必要な場合があります

cyg では Cygwin の bash.exe コマンドを -l オプション付きで実行しています。
このため、Cygwin のホームディレクトリに .bash_profile が存在しないと
.bashrc が実行されずに環境変数（PATH 等）の設定が行われません。この場合は、
Cygwin のホームディレクトリに以下の内容の .bash_profile ファイルを作成する
ことで対策してください。

＜~/.bash_profile＞
#+BEGIN_EXAMPLE
[ -r ~/.bashrc ] && source .bashrc
#+END_EXAMPLE

**** ● cyg は tty を必要とするコマンドは動作しません

cyg では tty を必要とするコマンドは動作しません。gnupack-13 系で提供される
.bashrc には stty の設定が含まれており、これが cyg 実行時にエラーを出力します。
stty 文を以下のとおりに if 文で囲むことでエラーを回避できますので、必要であれば
対策をしてください。

＜設定例＞
#+BEGIN_EXAMPLE
if [ -t 1 ]; then
    stty -ixon
fi
#+END_EXAMPLE

**** ● gnupack の startup_config.ini で行っている環境変数の設定は有効になりません

gnupack では startup_config.ini で環境変数の設定が可能となっています。しかし、
cyg ではその設定が有効になりません。startup_config.ini で PATH などの環境設定
を設定している場合は、.bashrc に設定を移すなどの対策が必要となります。

**** ● Cygwin のコマンドは WSL の LANG 環境変数の値で実行します

cyg では Cygwin のコマンドを WSL の LANG 環境変数の値で実行します。これは、
コマンド出力の文字化けを回避するために行っているものです。もし、Cygwin を
cp932 で使っている場合には、スクリプトの文字コードを変更するなど、調整が必要
となる可能性があります。

** ■ epeco

emacs 上の shell で peco もどきを実現するコマンドです。データの絞り込みに helm を
利用しています。

WSL で peco を利用するには Windows 10 April 2018 Update 以降が必要なようですが、
本コマンドにはこの制限はありません。また、絞り込みに migemo が使えます。

emacs が emacsclient と通信できるようになっており、helm と migemo が使える設定に
なっていれば利用可能と思います。

*** 使用方法

#+BEGIN_EXAMPLE
epeco [-q query] [file]
epeco -h
#+END_EXAMPLE

*** コマンドオプション

**** ● -q query オプション

絞り込み文字列の初期値を設定するオプションです。

*** 使用例

#+BEGIN_EXAMPLE
ps -ef | epeco | awk '{print $2}'
kill "$(ps -ef | epeco | awk '{print $2}')"

find . -maxdepth 3 -type d -name .git -prune -o -type d -print | epeco
cd "$(find . -maxdepth 3 -type d -name .git -prune -o -type d -print | epeco)"

history | tac | epeco | cut -b8-
eval "$(history | tac | epeco | cut -b8-)"
#+END_EXAMPLE

よく使うコマンドを alias 設定しておくのが良いと思います。

*** 注意事項

**** ● コマンドは同期モードで動作します

コマンドは、内部で helm を同期モード利用しています。コマンドへの入力データを
すべて取り込んでから helm が動作しますので、入力データを取り込みながら
そのデータの絞り込みを行なうことができません。これが peco との一番大きな仕様の
違いです。

本コマンドで満足できない場合には、rubikitch 氏による peco を 外部端末で起動して
させるラッパーコマンドがありますので、こちらのコマンドをお試しください。
ただし、WSL 利用するには Windows 10 April 2018 Update 以降が必要となります。

- http://emacs.rubikitch.com/peco-wrapper/

**** ● emacs が起動しているマシンの shell 上でのみ動作します

helm は tramp による接続先でも動作しますが、本コマンドは内部で emacsclient を
利用しているため、emacs を起動しているマシンの shell 上でのみしか動作しません。
tramp の接続先でも動作する同様の仕組みを構築するには、以下で紹介している設定の
ような comint と連携させる仕組み（zsh での zli による起動方法のような仕組み）が
必要と思われます。

- [[https://www49.atwiki.jp/ntemacs/pages/35.html][helm から comint の入力履歴を検索するための設定]]

この仕組みを採用するのであれば、epeco の機能を非同期で動作させることもできると
思います。ただし、シェルスクリプトで機能を完結させることはできなくなります。
